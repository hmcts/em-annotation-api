import org.gradle.internal.os.OperatingSystem

configurations {
    liquibase
}

dependencies {
    liquibase "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
}

if (OperatingSystem.current().isWindows()) {
    task pathingLiquibaseJar(type: Jar) {
        dependsOn configurations.liquibase
        appendix = 'pathingLiquibase'

        doFirst {
            manifest {
                attributes 'Class-Path':
                    sourceSets.main.runtimeClasspath.plus(configurations.liquibase)
                    .collect {
                        it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/')
                    }.join(' ')
            }
        }
    }
}

task initPaths(dependsOn: compileJava) {
    group = "liquibase"
    if (OperatingSystem.current().isWindows()) {
        dependsOn pathingLiquibaseJar
	}
}

def liquibaseCommand(command, changeLogFile = "--changeLogFile=src/main/resources/db/db.changelog-master.xml") {
    javaexec {
        if (OperatingSystem.current().isWindows()) {
            classpath files(pathingLiquibaseJar.archivePath)
        } else {
            classpath sourceSets.main.runtimeClasspath
            classpath configurations.liquibase
        }
        main = "liquibase.integration.commandline.Main"

        def urlString = project.hasProperty("dburl") ? "jdbc:postgresql://$dburl" : "jdbc:postgresql://localhost:6432/emannotationapp"
        def user = project.hasProperty("flyway.user") ? "${rootProject.properties['flyway.user']}" : 'postgres'
        def password = project.hasProperty("flyway.password") ? "${rootProject.properties['flyway.password']}" : 'postgres'

        args changeLogFile
        args "--referenceUrl=hibernate:spring:uk.gov.hmcts.reform.em.annotation.domain?dialect=org.hibernate.dialect.PostgreSQL94Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
        args "--username=$user"
        args "--password=$password"
        args "--url=$urlString"
        args "--driver=org.postgresql.Driver"

        args command
    }
}

task liquibaseUpdate(dependsOn: initPaths) {
    doLast {
        liquibaseCommand("update")
    }
}

task liquibaseDiffChangeLog(dependsOn: initPaths) {
    doLast {
        liquibaseCommand("diffChangeLog", "--changeLogFile=src/main/resources/db/changelog/" + buildTimestamp() +"_changelog.xml")
    }
}

task liquibaseClearChecksums(dependsOn: initPaths) {
    doLast {
        liquibaseCommand("clearChecksums")
    }
}

task liquibaseDropAllTables(dependsOn: initPaths) {
    doLast {
        liquibaseCommand("dropAll")
    }
}


def buildTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

task migratePostgresDatabase(dependsOn: 'liquibaseUpdate')