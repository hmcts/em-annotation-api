buildscript {
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
    }
}

plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'org.owasp.dependencycheck' version '5.2.2'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'org.sonarqube' version '2.8'
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "net.ltgt.apt" version "0.21"
    id 'jacoco'
    id 'au.com.dius.pact' version '4.0.2'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'
apply from: 'gradle/liquibase.gradle'

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-openfeign:2.1.3.RELEASE'
    }
}

if (!project.hasProperty('runList')) {
    project.ext.runList = 'main'
}


group 'uk.gov.hmcts.reform.em.annotation'
version '0.0.1'
sourceCompatibility = 1.8
mainClassName = 'uk.gov.hmcts.reform.em.annotation.Application'

configurations {
    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
}

repositories {
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    jcenter()
    mavenLocal()
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

def versions = [
        postgresql         : '42.2.8',
        springBoot         : '2.0.5.RELEASE',
        springfoxSwagger   : '2.9.2',
        h2                 : '1.4.197',
        liquibase          : '3.5.3',
        pact_version       : '3.5.24'
]

sourceSets {
    aat {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir('src/aat/java')
        }
        resources {
            srcDir('src/aat/resources')
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contactTest/resources')
    }
}

dependencies {
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org:2.10.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc:2.10.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.10.0"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.10.0"
    compile "com.fasterxml.jackson.core:jackson-databind:2.10.0"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.0'
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:2.9.9"
    compile "org.zalando:problem-spring-web:0.24.0-RC.0"
    compile("io.springfox:springfox-swagger2:${versions.springfoxSwagger}")
    compile("io.springfox:springfox-swagger-ui:${versions.springfoxSwagger}")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile( 'org.apache.httpcomponents:httpclient:4.5.10')
    compile "org.liquibase:liquibase-core"
    compile "org.liquibase:liquibase-core"
//    compile "com.mattbertolini:liquibase-slf4j"
    compile("org.postgresql:postgresql:${versions.postgresql}")
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    compile group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '2.3.1'
    compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
    compile "javax.transaction:javax.transaction-api"
    compile group: 'org.ehcache', name: 'ehcache', version: '3.7.1'
    compile "org.hibernate:hibernate-core"
    compile "com.zaxxer:HikariCP"
    compile "org.hibernate:hibernate-jcache"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate.validator:hibernate-validator"
    compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.3'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: '5.0.1'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: '5.0.1'
    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.0.4'
    compile "org.hibernate.validator:hibernate-validator"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
    compile "org.springframework.boot:spring-boot-starter-security"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testCompile 'io.rest-assured:rest-assured:3.2.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.200'
    testCompile 'com.warrenstrange:googleauth:1.4.0'

    testCompileOnly 'junit:junit:4.12'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

    testCompile "org.junit.jupiter:junit-jupiter-api:5.3.2"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.2"

    //pact contract testing
    contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
    contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version

    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')

    contractTestCompile sourceSets.main.runtimeClasspath
    contractTestCompile sourceSets.test.runtimeClasspath
}

bootJar {
    baseName 'em-annotation-app'
    archiveName = "$baseName"+".jar"
    destinationDir = file("$rootDir/build/libs")
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

def coverageExclusionList = [
    '**uk/gov/hmcts/reform/em/annotation/Application*',
    '**uk/gov/hmcts/reform/em/annotation/appinsights/*',
    '**uk/gov/hmcts/reform/em/annotation/domain/*',
    '**uk/gov/hmcts/reform/em/annotation/authchecker/*',
    '**uk/gov/hmcts/reform/em/annotation/config/*',
]

//(jacocoTestReport | jacocoTestCoverageVerification)
jacoco {
    toolVersion = '0.7.9' // jacocoMavenPluginVersion
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusionList)
        })
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", coverageExclusionList.join(", ")
    }
}


configurations {
    contractTestCompile.extendsFrom testCompile
    contractTestRuntime.extendsFrom testRuntime
}


idea {
    module {
        testSourceDirs += project.sourceSets.aat.java.srcDirs
        testResourceDirs += project.sourceSets.aat.resources.srcDirs
        testSourceDirs += project.sourceSets.contractTest.java.srcDirs
        testResourceDirs += project.sourceSets.contractTest.resources.srcDirs
    }
}

test {
    useJUnitPlatform()

}

task functional(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes functional tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/em/annotation/functional/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/em/annotation/smoke/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task contract(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/em/annotation/**"
    systemProperty 'pact.rootDir', "${rootDir}/pacts"
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'target/pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pactVersion
    }
}

dependencyCheck {
    suppressionFile = 'dependency-check-suppressions.xml'
}

compileJava.dependsOn processResources

